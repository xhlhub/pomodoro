name: Build Electron App

on:
  push:
    tags:
      - "v*.*.*" # 每次打 tag 会触发构建（如 v1.0.0）

permissions:
  contents: read
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest

    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }} # 👈 这一段是关键
      ELECTRON_BUILDER_CACHE: false
      ELECTRON_CACHE: .cache/electron
      ELECTRON_BUILDER_BINARIES_CACHE: .cache/electron-builder

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean lock file
        run: |
          echo "Checking for existing lock files..."
          if (Test-Path "package-lock.json") {
            $content = Get-Content "package-lock.json" -Raw
            if ($content -notlike "*lockfileVersion*2*") {
              echo "Removing incompatible lock file..."
              Remove-Item -Path "package-lock.json" -Force
            } else {
              echo "Temporary lock file found, keeping for cache..."
            }
          }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Create temporary lock file for cache
        run: |
          echo "Creating temporary package-lock.json for npm cache..."
          echo '{"lockfileVersion": 2}' > package-lock.json

      - name: Install dependencies
        run: node scripts/install-deps.js

      - name: Clean and reinstall if needed
        if: failure()
        run: |
          echo "Custom install failed, trying manual cleanup..."
          Remove-Item -Path "node_modules" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "package-lock.json" -Force -ErrorAction SilentlyContinue
          npm install --legacy-peer-deps --force --no-optional --no-audit --verbose

      - name: Install Python (for better-sqlite3)
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Debug environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Python version: $(python --version)"
          echo "Current directory: $(pwd)"
          echo "Listing files:"
          dir
          echo "Listing node_modules:"
          dir node_modules | findstr electron

      - name: Verify installation
        run: |
          echo "Verifying dependencies installation..."
          npm run verify
          echo "Checking electron installation..."
          npx electron --version

      - name: Rebuild native dependencies
        run: |
          echo "Installing app dependencies..."
          npm run postinstall
          echo "Rebuilding native modules..."
          npm run rebuild
        continue-on-error: true

      - name: Rebuild native dependencies (fallback)
        if: failure()
        run: |
          echo "Primary rebuild failed, trying custom rebuild script..."
          npm run rebuild:custom

      - name: Compile TypeScript
        run: npm run compile-main

      - name: Build React app
        run: npm run react-build

      - name: Confirm main.js exists
        run: dir dist\main.js

      - name: Confirm build files exist
        run: |
          dir dist
          dir build
          echo "Node version:"
          node --version
          echo "NPM version:"
          npm --version
          echo "Current directory:"
          pwd

      - name: Build and package (Windows)
        run: npx electron-builder --win

      - name: Check build output
        run: |
          echo "Checking build output..."
          dir output
          echo "Checking file sizes..."
          for file in output/*.exe; do
            if [ -f "$file" ]; then
              echo "File: $file"
              dir "$file"
            fi
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: output/*.exe

  build-macos:
    runs-on: macos-latest

    env:
      ELECTRON_BUILDER_CACHE: false
      ELECTRON_CACHE: .cache/electron
      ELECTRON_BUILDER_BINARIES_CACHE: .cache/electron-builder

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean lock file
        run: |
          echo "Checking for existing lock files..."
          if [ -f "package-lock.json" ]; then
            if ! grep -q '"lockfileVersion": 2' package-lock.json; then
              echo "Removing incompatible lock file..."
              rm -f package-lock.json
            else
              echo "Temporary lock file found, keeping for cache..."
            fi
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Create temporary lock file for cache
        run: |
          echo "Creating temporary package-lock.json for npm cache..."
          echo '{"lockfileVersion": 2}' > package-lock.json

      - name: Install dependencies
        run: node scripts/install-deps.js

      - name: Clean and reinstall if needed
        if: failure()
        run: |
          echo "Custom install failed, trying manual cleanup..."
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps --force --no-optional --no-audit --verbose

      - name: Debug environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Listing files:"
          ls -la
          echo "Listing node_modules:"
          ls -la node_modules | grep electron

      - name: Verify installation
        run: |
          echo "Verifying dependencies installation..."
          npm run verify
          echo "Checking electron installation..."
          npx electron --version

      - name: Rebuild native dependencies
        run: |
          echo "Installing app dependencies..."
          npm run postinstall
          echo "Rebuilding native modules..."
          npm run rebuild
        continue-on-error: true

      - name: Rebuild native dependencies (fallback)
        if: failure()
        run: |
          echo "Primary rebuild failed, trying custom rebuild script..."
          npm run rebuild:custom

      - name: Compile TypeScript
        run: npm run compile-main

      - name: Build React app
        run: npm run react-build

      - name: Confirm main.js exists
        run: ls -la dist/main.js

      - name: Confirm build files exist
        run: |
          ls -la dist
          ls -la build
          echo "Node version:"
          node --version
          echo "NPM version:"
          npm --version
          echo "Current directory:"
          pwd

      - name: Build and package (macOS)
        run: npx electron-builder --mac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: output/*.dmg
